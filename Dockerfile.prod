# references
# https://github.com/vercel/next.js/blob/canary/examples/with-docker/Dockerfile

FROM node:lts-alpine3.20 AS base

# =====================================================================================
# Install dependencies only when needed
FROM base AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app

COPY package.json package-lock.json ./
RUN npm config set fetch-retry-maxtimeout 600000 -g && npm install --force --only=production
RUN npm i sharp@0.32.6

# =====================================================================================
# Rebuild the source code only when needed
FROM base AS builder

# read the build arguments
ARG NODE_ENV=staging
ARG NEXTAUTH_URL
ARG NEXTAUTH_SECRET
ARG NEXT_PUBLIC_API_URL
ARG NEXT_PUBLIC_IMAGE_URL
ARG NEXT_INTERNAL_API_URL
ARG GOOGLE_CLIENT_KEY
ARG GOOGLE_SECRET_KEY
ARG NEXT_PUBLIC_RAZORPAY_KEY_ID

ENV NEXT_TELEMETRY_DISABLED 1

WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# create a environment specific file
ENV env_file=".env.${NODE_ENV}"
RUN echo "NODE_ENV=$NODE_ENV" > "$env_file"
RUN echo "NEXTAUTH_URL=$NEXTAUTH_URL" >> "$env_file"
RUN echo "NEXTAUTH_SECRET=$NEXTAUTH_SECRET" >> "$env_file"

RUN echo "GOOGLE_CLIENT_KEY=$GOOGLE_CLIENT_KEY" >> "$env_file"
RUN echo "GOOGLE_SECRET_KEY=$GOOGLE_SECRET_KEY" >> "$env_file"

RUN echo "NEXT_INTERNAL_API_URL=$NEXT_INTERNAL_API_URL" >> "$env_file"
RUN echo "NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL" >> "$env_file"
RUN echo "NEXT_PUBLIC_IMAGE_URL=$NEXT_PUBLIC_IMAGE_URL" >> "$env_file"
RUN echo "NEXT_PUBLIC_RAZORPAY_KEY_ID=$NEXT_PUBLIC_RAZORPAY_KEY_ID" >> "$env_file"


RUN echo "Created $env_file:"

RUN yarn build

# =====================================================================================
# Production image, copy all the files and run next
FROM base AS runner

ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}
# Uncomment the following line in case you want to disable telemetry during runtime.
ENV NEXT_TELEMETRY_DISABLED 1
ENV env_file=".env.${NODE_ENV}"

RUN apk add --no-cache tini

WORKDIR /app

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public

# Set the correct permission for prerender cache
RUN mkdir .next
RUN chown nextjs:nodejs ./ .next

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/${env_file} ./${env_file}

USER nextjs

EXPOSE 3000
ENV PORT 3000

# for alpine
ENTRYPOINT ["/sbin/tini", "--"]

# server.js is created by next build from the standalone output
# https://nextjs.org/docs/pages/api-reference/next-config-js/output
CMD ["node", "server.js"]